package springcloud.demo.uml;

/**
 * @Author: Dely
 * @Date: 2019/12/9 0:22
 */

/**
 * UML类图的学习：
 * 类根据功能，通常可以分成3种类型：
 *   1.实体类：存储到数据库中的实体类
 *   2.控制类：用于体现应用程序的执行逻辑，提供业务操作的方法，降低界面和数据库的耦合度，通常由动词+名词组成类名。比如service中的类
 *   3.边界类：即在用户界面和数据库之间抽象出来的一个类，vo中的类。
 *
 * uml类的描述：一个矩形，通过在举行中添加2条横线，从上到下依次为 类名 属性定义 方法定义。 抽象类在类名的同一格 在类名上边加上 《abstract》
 * uml接口的描述：和抽象类的描述一样，只是将《abstract》改为《interface》 或者是在接口名的同一格的左上方加上 空心圆圈连上-
 *
 *  1.关联关系：通常一个类作为另一个类的成员变量，在关系线上可以添加动词或者名词来标识角色关系。6中关联关系。
 *     **自关联：一个类包含自己这个类型的成员属性。（->）
 *     **单向关联：一个类的属性是另一个类的对象。（->）
 *     **双向关系：一个类和另一个互相包含各自的对象作为属性。（-）
 *     **多重性关联：表示一个类的多少个对象与另一个类多少个对象之间的关系，即一个类中包含另一个类的多少个对象。存在表达式表示。（->）
 *     **聚合关系：表示整体和部分的关系，整体类中，包含局部类作为属性，通常通过构造方法或者是set方法来給属性赋值，局部类在整体类中的对象可以独立存在。（空心菱形 加上 ->）
 *     **组合关系：整体和局部的关系，同生共死。整体不存在了，局部也不能存在。通常通过构造方法来创建局部类的对象。（实心菱形 加上 ->）
 *
 *  2.依赖关系：依赖方会受被依赖方的改变而影响。通常依赖方通过在自己的方法里边，通过调用被依赖方的对象方法来实现一定的功能。（--->）
 *     **在依赖方的方法中传入被依赖方的对象
 *     **在依赖方的方法里边，创建被依赖方的对象
 *     **在依赖方的方法里边，通过被依赖方的类来调用被依赖方的静态方法。
 *
 *  3.泛化关系：即继承关系。子类指向父类(- 加上 空心三角形)
 *
 *  4.接口与实现方式：接口间相互继承参见类间的继承。类实现接口通过 实现类指向接口（----- 加上 空心三角形）
 *
 * 总结：如上。
 *
 *
 */

public class UmlGrap {
}
